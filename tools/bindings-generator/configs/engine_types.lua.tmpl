-- auto generated by tools
#for globalVarName in $luaGlobalVars
$globalVarName = {}
#end for

#set declareSubInfo = {}

## enumTypes
-- enum types
#for enumType in $enumTypes
    #set enumInfo = $parsedEnums[enumType]
---@alias ${enumInfo.luaClassName} number

---@class ${enumInfo.luaClassName}Enum
    #for m in enumInfo.fields
---@field ${m[0]} number
    #end for

    #if not enumInfo.parentDeclare or enumInfo.parentDeclare not in $declareSubTypeInfo
---@type ${enumInfo.luaClassName}Enum
${enumInfo.luaClassName} = nil
    #end if
#end for

## arrRegAllClassesOrStructs
#for classInfo in $arrRegAllClassesOrStructs

-- ${classInfo.ns_full_name}
    #set parentDescS = ': NativeType'
    #set parentDesc = ': NativeType'
    #if classInfo.parents
        #set parentDescS = ': ' + classInfo.parents[0].luaClassName + 'S'
        #set parentDesc = ': ' + classInfo.parents[0].luaClassName
    #end if
---@class ${classInfo.decalreLuaClassName}S${parentDescS}
    ## sub types
    #set arrDeclareInfo = $declareSubTypeInfo.get(classInfo.ns_full_name)
    #if arrDeclareInfo
        #for desc in arrDeclareInfo
${desc}
        #end for
    #end if
    ## const static vars
    #for name, tp in classInfo.validStaticConstVars
---@field ${name} ${tp.luaType}
    #end for
    ## validConstructors
    #for _, m in classInfo.validConstructors.items()
${m.luaFieldDesc}
    #end for
    ## validStaticMethods
    #for _, m in classInfo.validStaticMethods.items()
${m.luaFieldDesc}
    #end for
    ## struct method is static methods
    #if classInfo.isStruct
        #for _, m in classInfo.validMethods.items()
${m.luaFieldDesc}
        #end for
    #end if

---@class ${classInfo.decalreLuaClassName}${parentDesc}
    #for m in classInfo.validFields
${m.luaFieldDesc}
    #end for
    #if not classInfo.isStruct
        #for _, m in classInfo.validMethods.items()
${m.luaFieldDesc}
        #end for
    #end if

---@type ${classInfo.luaClassName}S
${classInfo.luaClassName} = nil
#end for
