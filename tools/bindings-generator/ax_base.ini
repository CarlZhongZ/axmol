[ax_base]

android_headers = 

android_flags = -target armv7-none-linux-androideabi -D_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS -DANDROID -D__ANDROID_API__=16  -idirafter %(androidndkdir)s/sources/android/support/include -idirafter %(clangllvmdir)s/sysroot/usr/include -idirafter %(clangllvmdir)s/sysroot/usr/include/arm-linux-androideabi -I%(androidndkdir)s/sources/cxx-stl/llvm-libc++/include

clang_headers = 
clang_flags = -nostdinc -x c++ -std=%(cxx_std)s -fsigned-char -U__SSE__

ax_headers = -I%(axdir)s/core -I%(axdir)s/core/platform/android -I%(axdir)s/extensions -I%(axdir)s/thirdparty -I%(axdir)s/thirdparty/robin-map/include -I%(axdir)s/thirdparty/jni.hpp/include -I%(axdir)s/thirdparty/glad/include
ax_flags = -DANDROID

cxxgenerator_headers =

# extra arguments for clang
clang_args = %(android_headers)s %(clang_headers)s %(cxxgenerator_headers)s %(ax_headers)s %(android_flags)s %(clang_flags)s %(ax_flags)s %(extra_flags)s

# what headers to parse
headers = %(axdir)s/core/cocos2d.h

# what classes to produce code for. You can use regular expressions here. When testing the regular
# expression, it will be enclosed in "^$", like this: "^Menu*$".
classes = ax::[New.* Sprite.* Scene Node.* Director Layer.* Touch .*Action.* Move.* Rotate.* Blink.* Tint.* Sequence Repeat.* Fade.* Ease.* Scale.* Transition.* Spawn Animat.* Flip.* Delay.* Skew.* Jump.* Place.* Show.* Progress.* PointArray ToggleVisibility.* RemoveSelf Hide Particle.* Label.* Atlas.* TextureCache.* Texture2D Cardinal.* CatmullRom.* CallFunc RenderTexture GridAction Grid3DAction GridBase$ .+Grid Shaky3D Waves3D FlipX3D FlipY3D Speed ActionManager Set Scheduler Timer Orbit.* Follow.* Bezier.* CardinalSpline.* Camera.* DrawNode .*3D$ Liquid$ Waves$ ShuffleTiles$ TurnOffTiles$ Split.* Twirl$ FileUtils$ GLProgram ShaderCache Application ClippingNode MotionStreak ^Ref$ UserDefault GLViewImpl GLView Image Event(?!.*(Physics).*).* Component ProtectedNode Console Device ClippingRectangleNode .*Light$ AsyncTaskPool RenderState Material Properties Technique Pass PolygonInfo AutoPolygon BoneNode SkeletonNode PipelineDescriptor Renderer]

non_ref_classes = ax::[Vec2 Vec3 Vec4 Rect Mat4 Quaternion]
